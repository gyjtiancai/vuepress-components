(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{426:function(t,v,_){"use strict";_.r(v);var s=_(42),i=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"主要针对javascript的概念理解"}},[t._v("主要针对JavaScript的概念理解")]),t._v(" "),_("h2",{attrs:{id:"栈、队列、堆"}},[t._v("栈、队列、堆")]),t._v(" "),_("h3",{attrs:{id:"栈"}},[t._v("栈")]),t._v(" "),_("p",[t._v("栈是一种后进先出（LIFO，Last-In-First-Out）的结构\n栈内存存储的是基础类型（Undefined、Null、Boolean、Number、String 和 Symbol）的变量，变量生命周期一旦结束（离开作用域）就会被释放")]),t._v(" "),_("h3",{attrs:{id:"队列"}},[t._v("队列")]),t._v(" "),_("p",[t._v("队列以先进先出（FIFO，First-In-First-Out）形式限制访问")]),t._v(" "),_("h3",{attrs:{id:"堆"}},[t._v("堆")]),t._v(" "),_("p",[t._v("堆内存存储的是对象，对象用于封装数据（对象的多个属性），如果一个数据消失，这个实体也没有消失，还可以用，所以堆是不会随时释放的，虽然不会被释放，但是会被当成垃圾，JavaScript有垃圾回收机制不定时的收取。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),_("p",[t._v("需要解除对象的引用才可释放堆里的对象（obj = null），解除对一个值的引用并不会自动导致相关内存被回收。解除引用的关键在于确保相关的值已经不在作用域里了，因此它在下次垃圾回收时会被回收")])]),t._v(" "),_("h3",{attrs:{id:"栈和堆的区别"}},[t._v("栈和堆的区别")]),t._v(" "),_("ul",[_("li",[t._v("1.栈内存存储的是局部变量而堆内存存储的是实体；")]),t._v(" "),_("li",[t._v("2.栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；")]),t._v(" "),_("li",[t._v("3.栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。")])]),t._v(" "),_("h2",{attrs:{id:"工厂模式"}},[t._v("工厂模式")]),t._v(" "),_("p",[t._v("工厂模式是一种众所周知的设计模式，广泛应用于软件工程领域，用于抽象创建特定对象的过程")]),t._v(" "),_("h2",{attrs:{id:"捕获器"}},[t._v("捕获器")]),t._v(" "),_("p",[t._v("在操作系统中，捕获器是程序流中的一个同步中断，可以暂停程序流，转而执行一段子例程，之后再返回原始程序流")])])}),[],!1,null,null,null);v.default=i.exports}}]);